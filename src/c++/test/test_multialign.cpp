// -*- mode: c++; indent-tabs-mode: nil; -*-
//
// Copyright (c) 2010-2015 Illumina, Inc.
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.

// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/**
 *
 * Test for multiple alignment code
 *
 * \file test_multialign.cpp
 * \author Peter Krusche
 * \email pkrusche@illumina.com
 *
 */
#define BOOST_TEST_NO_MAIN
#include <boost/test/unit_test.hpp>
#include <boost/test/test_tools.hpp>
#include <boost/filesystem/path.hpp>

#include "MultipleAlignment.hh"
#include "helpers/Timing.hh"

#include <cstdlib>

#ifdef HAS_MUSCLE

BOOST_AUTO_TEST_CASE(multiAlignBasic)
{
    MultipleAlignment maln;
    std::string pr, p1, p2;

	maln.align(
		"GAGTCATTATTATTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTTTTTCTTTTCTTTTCTTTTCTCTTCTTTTTTGAGAGGGAGCCTCGCTCTGTTGCCCAGGCTGGAGT",
 		"GAGTCATTATTATTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTTTTTCTTTTCTTTTCTTTTCTCTTCTTTTTTGAGAGGGAGCCTCGCTCTGTTGCCCAGGCTGGAGT",
 		"GAGTCATTATTATTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTCTTCTTTTTTGAGAGGGAGCCTCGCTCTGTTGCCCAGGCTGGAGT",
 		pr, p1, p2
 		);

	BOOST_CHECK_EQUAL(pr, "GAGTCATTATTATTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTTTTTCTTTTCTTTTCTTTTCTCTTCTTTTTTGAGAGGGAGCCTCGCTCTGTTGCCCAGGCTGGAGT");
	BOOST_CHECK_EQUAL(p1, "GAGTCATTATTATTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTCTTTTTTTTCTTTTCTTTTCTTTTCTCTTCTTTTTTGAGAGGGAGCCTCGCTCTGTTGCCCAGGCTGGAGT");
	BOOST_CHECK_EQUAL(p2, "GAGTCATTATTATTTCTTTTCTTTTCTTTTC-----------------------------TTTTCTTTTCTTTTCTTTTCTCTTCTTTTTTGAGAGGGAGCCTCGCTCTGTTGCCCAGGCTGGAGT");
}

BOOST_AUTO_TEST_CASE(multiAlign2)
{
    MultipleAlignment maln;
    std::string pr, p1, p2;
	
	maln.align(
		"AATGACACTTTTCTAGGAATATATATATGTGTATATATATACATATATATATTCTAGGAATATATATA",
 		"AATGACACTTTTCTAGGAATATATATATGTATATATATATACATATATATATTCTAGGAATATATATA",
 		"AATGACACTTTTCTAGGAATATATATATGTATATATATACATACATATATATATTCTAGGAATATATATA",
 		pr, p1, p2
 		);

	BOOST_CHECK_EQUAL(pr, "AATGACACTTTTCTAGGAATATATATATGTGTATATAT--ATACATATATATATTCTAGGAATATATATA");
	BOOST_CHECK_EQUAL(p1, "AATGACACTTTTCTAGGAATATATATATGTATATATAT--ATACATATATATATTCTAGGAATATATATA");
	BOOST_CHECK_EQUAL(p2, "AATGACACTTTTCTAGGAATATATATATGTATATATATACATACATATATATATTCTAGGAATATATATA");
}

#endif
